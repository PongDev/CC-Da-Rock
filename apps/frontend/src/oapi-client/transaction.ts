/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * API Document
 * API Document Description
 * OpenAPI spec version: 1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  PurchaseSolarCoinsRequestDTO,
  TransactionControllerGetTransactionsParams,
  TransactionControllerGetUserTransactionsParams,
} from "./aPIDocument.schemas";

export const transactionControllerPurchaseSolarCoins = (
  purchaseSolarCoinsRequestDTO: PurchaseSolarCoinsRequestDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `/transaction/solarcoins/purchase`,
    purchaseSolarCoinsRequestDTO,
    options
  );
};

export const getTransactionControllerPurchaseSolarCoinsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof transactionControllerPurchaseSolarCoins>>,
    TError,
    { data: PurchaseSolarCoinsRequestDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof transactionControllerPurchaseSolarCoins>>,
  TError,
  { data: PurchaseSolarCoinsRequestDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof transactionControllerPurchaseSolarCoins>>,
    { data: PurchaseSolarCoinsRequestDTO }
  > = (props) => {
    const { data } = props ?? {};

    return transactionControllerPurchaseSolarCoins(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TransactionControllerPurchaseSolarCoinsMutationResult = NonNullable<
  Awaited<ReturnType<typeof transactionControllerPurchaseSolarCoins>>
>;
export type TransactionControllerPurchaseSolarCoinsMutationBody =
  PurchaseSolarCoinsRequestDTO;
export type TransactionControllerPurchaseSolarCoinsMutationError =
  AxiosError<unknown>;

export const useTransactionControllerPurchaseSolarCoins = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof transactionControllerPurchaseSolarCoins>>,
    TError,
    { data: PurchaseSolarCoinsRequestDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions =
    getTransactionControllerPurchaseSolarCoinsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const transactionControllerGetTransactions = (
  params?: TransactionControllerGetTransactionsParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/transaction/all`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getTransactionControllerGetTransactionsQueryKey = (
  params?: TransactionControllerGetTransactionsParams
) => [`/transaction/all`, ...(params ? [params] : [])] as const;

export const getTransactionControllerGetTransactionsQueryOptions = <
  TData = Awaited<ReturnType<typeof transactionControllerGetTransactions>>,
  TError = AxiosError<unknown>
>(
  params?: TransactionControllerGetTransactionsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof transactionControllerGetTransactions>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof transactionControllerGetTransactions>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTransactionControllerGetTransactionsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof transactionControllerGetTransactions>>
  > = ({ signal }) =>
    transactionControllerGetTransactions(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type TransactionControllerGetTransactionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof transactionControllerGetTransactions>>
>;
export type TransactionControllerGetTransactionsQueryError =
  AxiosError<unknown>;

export const useTransactionControllerGetTransactions = <
  TData = Awaited<ReturnType<typeof transactionControllerGetTransactions>>,
  TError = AxiosError<unknown>
>(
  params?: TransactionControllerGetTransactionsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof transactionControllerGetTransactions>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTransactionControllerGetTransactionsQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const transactionControllerGetUserTransactions = (
  params?: TransactionControllerGetUserTransactionsParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/transaction`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getTransactionControllerGetUserTransactionsQueryKey = (
  params?: TransactionControllerGetUserTransactionsParams
) => [`/transaction`, ...(params ? [params] : [])] as const;

export const getTransactionControllerGetUserTransactionsQueryOptions = <
  TData = Awaited<ReturnType<typeof transactionControllerGetUserTransactions>>,
  TError = AxiosError<unknown>
>(
  params?: TransactionControllerGetUserTransactionsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof transactionControllerGetUserTransactions>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof transactionControllerGetUserTransactions>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTransactionControllerGetUserTransactionsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof transactionControllerGetUserTransactions>>
  > = ({ signal }) =>
    transactionControllerGetUserTransactions(params, {
      signal,
      ...axiosOptions,
    });

  return { queryKey, queryFn, ...queryOptions };
};

export type TransactionControllerGetUserTransactionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof transactionControllerGetUserTransactions>>
>;
export type TransactionControllerGetUserTransactionsQueryError =
  AxiosError<unknown>;

export const useTransactionControllerGetUserTransactions = <
  TData = Awaited<ReturnType<typeof transactionControllerGetUserTransactions>>,
  TError = AxiosError<unknown>
>(
  params?: TransactionControllerGetUserTransactionsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof transactionControllerGetUserTransactions>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTransactionControllerGetUserTransactionsQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
