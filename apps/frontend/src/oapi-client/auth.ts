/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * API Document
 * API Document Description
 * OpenAPI spec version: 1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  RegisterUserResponse,
  RegisterUserRetailRequest,
  RegisterUserSMEsRequest,
  LoginRequest,
  VerifyEmailResponseDto,
  ResendEmailResponseDto,
  ResendEmailRequestDto,
  ForgotPasswordRequestDTO,
  ResetPasswordRequestDTO,
} from "./aPIDocument.schemas";

export const authControllerRegisterRetail = (
  registerUserRetailRequest: RegisterUserRetailRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RegisterUserResponse>> => {
  return axios.post(
    `/auth/register/retail`,
    registerUserRetailRequest,
    options
  );
};

export const getAuthControllerRegisterRetailMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegisterRetail>>,
    TError,
    { data: RegisterUserRetailRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRegisterRetail>>,
  TError,
  { data: RegisterUserRetailRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegisterRetail>>,
    { data: RegisterUserRetailRequest }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerRegisterRetail(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRegisterRetailMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegisterRetail>>
>;
export type AuthControllerRegisterRetailMutationBody =
  RegisterUserRetailRequest;
export type AuthControllerRegisterRetailMutationError = AxiosError<void>;

export const useAuthControllerRegisterRetail = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegisterRetail>>,
    TError,
    { data: RegisterUserRetailRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions =
    getAuthControllerRegisterRetailMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authControllerRegisterSMEs = (
  registerUserSMEsRequest: RegisterUserSMEsRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RegisterUserResponse>> => {
  return axios.post(`/auth/register/SMEs`, registerUserSMEsRequest, options);
};

export const getAuthControllerRegisterSMEsMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegisterSMEs>>,
    TError,
    { data: RegisterUserSMEsRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRegisterSMEs>>,
  TError,
  { data: RegisterUserSMEsRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegisterSMEs>>,
    { data: RegisterUserSMEsRequest }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerRegisterSMEs(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRegisterSMEsMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegisterSMEs>>
>;
export type AuthControllerRegisterSMEsMutationBody = RegisterUserSMEsRequest;
export type AuthControllerRegisterSMEsMutationError = AxiosError<void>;

export const useAuthControllerRegisterSMEs = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegisterSMEs>>,
    TError,
    { data: RegisterUserSMEsRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getAuthControllerRegisterSMEsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authControllerLogIn = (
  loginRequest: LoginRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/auth/login`, loginRequest, options);
};

export const getAuthControllerLogInMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogIn>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogIn>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogIn>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogIn(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLogInMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogIn>>
>;
export type AuthControllerLogInMutationBody = LoginRequest;
export type AuthControllerLogInMutationError = AxiosError<unknown>;

export const useAuthControllerLogIn = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogIn>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getAuthControllerLogInMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authControllerRefresh = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/auth/refresh`, undefined, options);
};

export const getAuthControllerRefreshMutationOptions = <
  TError = AxiosError<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRefresh>>,
    TError,
    TVariables,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRefresh>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRefresh>>,
    TVariables
  > = () => {
    return authControllerRefresh(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRefresh>>
>;

export type AuthControllerRefreshMutationError = AxiosError<unknown>;

export const useAuthControllerRefresh = <
  TError = AxiosError<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRefresh>>,
    TError,
    TVariables,
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getAuthControllerRefreshMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authControllerProfile = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/auth/profile`, options);
};

export const getAuthControllerProfileQueryKey = () =>
  [`/auth/profile`] as const;

export const getAuthControllerProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerProfile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerProfile>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof authControllerProfile>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthControllerProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerProfile>>
  > = ({ signal }) => authControllerProfile({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type AuthControllerProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerProfile>>
>;
export type AuthControllerProfileQueryError = AxiosError<unknown>;

export const useAuthControllerProfile = <
  TData = Awaited<ReturnType<typeof authControllerProfile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerProfile>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthControllerProfileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const authControllerVerify = (
  token: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<VerifyEmailResponseDto>> => {
  return axios.get(`/auth/email/verify/${token}`, options);
};

export const getAuthControllerVerifyQueryKey = (token: string) =>
  [`/auth/email/verify/${token}`] as const;

export const getAuthControllerVerifyQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerVerify>>,
  TError = AxiosError<void>
>(
  token: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof authControllerVerify>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof authControllerVerify>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerVerifyQueryKey(token);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerVerify>>
  > = ({ signal }) => authControllerVerify(token, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!token, ...queryOptions };
};

export type AuthControllerVerifyQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerVerify>>
>;
export type AuthControllerVerifyQueryError = AxiosError<void>;

export const useAuthControllerVerify = <
  TData = Awaited<ReturnType<typeof authControllerVerify>>,
  TError = AxiosError<void>
>(
  token: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof authControllerVerify>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthControllerVerifyQueryOptions(token, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const authControllerResendEmailVerification = (
  resendEmailRequestDto: ResendEmailRequestDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ResendEmailResponseDto>> => {
  return axios.get(`/auth/email/resend`, options);
};

export const getAuthControllerResendEmailVerificationMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerResendEmailVerification>>,
    TError,
    { data: ResendEmailRequestDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerResendEmailVerification>>,
  TError,
  { data: ResendEmailRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerResendEmailVerification>>,
    { data: ResendEmailRequestDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerResendEmailVerification(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerResendEmailVerificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerResendEmailVerification>>
>;
export type AuthControllerResendEmailVerificationMutationBody =
  ResendEmailRequestDto;
export type AuthControllerResendEmailVerificationMutationError =
  AxiosError<void>;

export const useAuthControllerResendEmailVerification = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerResendEmailVerification>>,
    TError,
    { data: ResendEmailRequestDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions =
    getAuthControllerResendEmailVerificationMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authControllerForgotPassword = (
  forgotPasswordRequestDTO: ForgotPasswordRequestDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/auth/forgot-password`, forgotPasswordRequestDTO, options);
};

export const getAuthControllerForgotPasswordMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerForgotPassword>>,
    TError,
    { data: ForgotPasswordRequestDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerForgotPassword>>,
  TError,
  { data: ForgotPasswordRequestDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerForgotPassword>>,
    { data: ForgotPasswordRequestDTO }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerForgotPassword(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerForgotPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerForgotPassword>>
>;
export type AuthControllerForgotPasswordMutationBody = ForgotPasswordRequestDTO;
export type AuthControllerForgotPasswordMutationError = AxiosError<unknown>;

export const useAuthControllerForgotPassword = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerForgotPassword>>,
    TError,
    { data: ForgotPasswordRequestDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions =
    getAuthControllerForgotPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authControllerResetPassword = (
  resetPasswordRequestDTO: ResetPasswordRequestDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/auth/reset-password`, resetPasswordRequestDTO, options);
};

export const getAuthControllerResetPasswordMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerResetPassword>>,
    TError,
    { data: ResetPasswordRequestDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerResetPassword>>,
  TError,
  { data: ResetPasswordRequestDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerResetPassword>>,
    { data: ResetPasswordRequestDTO }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerResetPassword(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerResetPassword>>
>;
export type AuthControllerResetPasswordMutationBody = ResetPasswordRequestDTO;
export type AuthControllerResetPasswordMutationError = AxiosError<unknown>;

export const useAuthControllerResetPassword = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerResetPassword>>,
    TError,
    { data: ResetPasswordRequestDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions =
    getAuthControllerResetPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
